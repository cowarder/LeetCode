Longest Substring Without Repeating Characters



description:
Given a string, find the length of the longest substring without repeating characters.

Examples:

Given "abcabcbb", the answer is "abc", which the length is 3.

Given "bbbbb", the answer is "b", with the length of 1.

Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring,
 "pwke" is a subsequence and not a substring



At first,I thought there were only letters in the string,the algorithm is as follows:

class Solution {
public:
	int lengthOfLongestSubstring(string s) {
		vector<vector<int>> a(26);
		int maxLength = 0;
		int i = 0;
		int f = 0;
		while (a[s[f] - 'a'].size() == 0 ) {
			a[s[f] - 'a'].push_back(i);
			maxLength++;
			f++;
			if (f >= s.length())
				break;
		}
		for (int u = 0; u < f; u++)
			a[s[u] - 'a'].resize(0);

		i = f;
		int p = 0;
		while (i <s.length()) {
			if (a[s[i] - 'a'].size() == 0) {
				a[s[i] - 'a'].push_back(i);
				p++;
				if (p > maxLength)
					maxLength = p;
			}
			else {
				p = 1;
				if (i - a[s[i] - 'a'][0] > maxLength)
					maxLength = i - a[s[i] - 'a'][0];
				for (int j = 0; j < i; j++)
					a[s[j] - 'a'].resize(0);
				a[s[i] - 'a'].push_back(i);
			}
			i++;
		}
		return maxLength;
	}
};






A excellent sollution
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        
        map<char, int> charMap;
        int start = -1;
        int maxLen = 0;
        
        for (int i = 0; i < s.size(); i++) {
            if (charMap.count(s[i]) != 0) {
                start = max(start, charMap[s[i]]);
            }
            charMap[s[i]] = i;
            maxLen = max(maxLen, i-start);
        }
        
        return maxLen;
    }
};