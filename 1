Two Sum



description:
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].



class Solution {
public:
	vector<int> twoSum(vector<int>& nums, int target) {
		vector<int> a{};
		vector<int> t(nums.begin(), nums.end());
		sort(t.begin(),t.end());
		int low = 0, high = t.size() - 1;
		while (low < high&&(t[low]+t[high])!=target) {
			while (t[high] + t[low] > target&&low<high) 
				high--;
			while (t[high] + t[low] < target&&low<high)
				low++;
			
		}
		if(low<high){
			for (int i = 0; i != nums.size(); i++) {
				if (t[low] == nums[i] || t[high] == nums[i])
					a.push_back(i);
			}
		}
		return a;
	}
};