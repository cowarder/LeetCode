#include<iostream>
#include<stack>
#include<map>
#include<string>
using namespace std;

/*
	思路：简单德使用一个栈存储前面的字符
	如果遇到对应的字符，就将栈顶元素出栈
	对应信息存储在map中

	栈没有元素的情况下是不能调用top函数的
*/
class Solution {
public:
	bool isValid(string s) {
		map<char, char> m;
		m[')'] = '(';
		m[']'] = '[';
		m['}'] = '{';
		stack<char> ss;
		char c;
		for (int i = 0; i < s.size(); i++) {
			c = s[i];
			if (c == '(' || c == '{' || c == '[')
				ss.push(c);
			else {
				//这里需要注意先判断栈的元素个数是否为空
				//如果不为空才能调用ss.top(),否则会出错
				if (ss.size()==0 || ss.top() != m[c])
					return false;
				else if(ss.top() == m[c])
					ss.pop();
				
			}
		}
		if (ss.size() == 0)
			return true;
		else
			return false;
	}
};

int main() {
	Solution s;
	stack<int>a;
	cout << a.top() << endl;
	cout << s.isValid("{[()]}");
	return 0;

}
